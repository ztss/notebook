1.二叉搜索树
   binary search tree,
   插入：肯定是插入到叶子节点，可以用递归。
   删除：如果删除叶子节点，直接free即可，如果删除的节点有左右子树，那么可以取右子树的最
   小的元素替代，也可以用左子树最大的节点替代被删除的节点。因为这两种节点肯定最多只有一
   个儿子。
2.平衡二叉树
   nh=n(h-1)+n(h-2)+1
   平衡二叉树的平衡；有RR,LL,RL,LR旋转。其中R L是插入点相对与被破坏平衡点的位置。
3.逆转链表
4.两个序列是否对应相同的搜索树
   分别建两个树，然后看树是否一样
   也有不建树的方法。
   或者建一棵树，看其他序列是否和树一致。
   typedef struct TreeNode* Tree;
   struct TreeNode{
      int v;
      Tree left;
      Tree right;
      int flag;//看节点是否被访问过
   };
   int main()
   {
      读入数据
      根据第一行建树
      判别
      return 0;
   }
   Tree T=(Tree)malloc(sizeof(struct TreeNode));
   判别的方法就是在树上搜索后面序列的每一个数。如果每次搜索所经过的节点在前面都出现过，
   则一致。否则，不一致。利用了flag。
